// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AdminChanged extends ethereum.Event {
  get params(): AdminChanged__Params {
    return new AdminChanged__Params(this);
  }
}

export class AdminChanged__Params {
  _event: AdminChanged;

  constructor(event: AdminChanged) {
    this._event = event;
  }

  get previousAdmin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newAdmin(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class BeaconUpgraded extends ethereum.Event {
  get params(): BeaconUpgraded__Params {
    return new BeaconUpgraded__Params(this);
  }
}

export class BeaconUpgraded__Params {
  _event: BeaconUpgraded;

  constructor(event: BeaconUpgraded) {
    this._event = event;
  }

  get beacon(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class FundManagerCreated extends ethereum.Event {
  get params(): FundManagerCreated__Params {
    return new FundManagerCreated__Params(this);
  }
}

export class FundManagerCreated__Params {
  _event: FundManagerCreated;

  constructor(event: FundManagerCreated) {
    this._event = event;
  }

  get fundManager(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get user(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get label(): string {
    return this._event.parameters[2].value.toString();
  }
}

export class ImplementationUpdated extends ethereum.Event {
  get params(): ImplementationUpdated__Params {
    return new ImplementationUpdated__Params(this);
  }
}

export class ImplementationUpdated__Params {
  _event: ImplementationUpdated;

  constructor(event: ImplementationUpdated) {
    this._event = event;
  }

  get previousImpl(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newImpl(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get typeId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class OwnershipTransferStarted extends ethereum.Event {
  get params(): OwnershipTransferStarted__Params {
    return new OwnershipTransferStarted__Params(this);
  }
}

export class OwnershipTransferStarted__Params {
  _event: OwnershipTransferStarted;

  constructor(event: OwnershipTransferStarted) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class ProtocolLibInfoUpdated extends ethereum.Event {
  get params(): ProtocolLibInfoUpdated__Params {
    return new ProtocolLibInfoUpdated__Params(this);
  }
}

export class ProtocolLibInfoUpdated__Params {
  _event: ProtocolLibInfoUpdated;

  constructor(event: ProtocolLibInfoUpdated) {
    this._event = event;
  }

  get typeId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get lib(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class SetNewFundManagerImplForProxy extends ethereum.Event {
  get params(): SetNewFundManagerImplForProxy__Params {
    return new SetNewFundManagerImplForProxy__Params(this);
  }
}

export class SetNewFundManagerImplForProxy__Params {
  _event: SetNewFundManagerImplForProxy;

  constructor(event: SetNewFundManagerImplForProxy) {
    this._event = event;
  }

  get proxy(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newImpl(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get typeId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Upgraded extends ethereum.Event {
  get params(): Upgraded__Params {
    return new Upgraded__Params(this);
  }
}

export class Upgraded__Params {
  _event: Upgraded;

  constructor(event: Upgraded) {
    this._event = event;
  }

  get implementation(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class FactoryContract__deployBasicFundManagerInput_fundConfigStruct extends ethereum.Tuple {
  get configAddress(): Array<Address> {
    return this[0].toAddressArray();
  }

  get name(): Bytes {
    return this[1].toBytes();
  }

  get symbol(): Bytes {
    return this[2].toBytes();
  }
}

export class FactoryContract__deployBasicFundManagerInput_swapArgsStruct extends ethereum.Tuple {
  get _extension(): Address {
    return this[0].toAddress();
  }

  get _actionId(): BigInt {
    return this[1].toBigInt();
  }

  get _callArgs(): Bytes {
    return this[2].toBytes();
  }
}

export class FactoryContract__deployBasicFundManagerInput_positionArgsStruct extends ethereum.Tuple {
  get _extension(): Address {
    return this[0].toAddress();
  }

  get _actionId(): BigInt {
    return this[1].toBigInt();
  }

  get _callArgs(): Bytes {
    return this[2].toBytes();
  }
}

export class FactoryContract__getStratgiesOfUserResult {
  value0: Array<Address>;
  value1: Array<Address>;

  constructor(value0: Array<Address>, value1: Array<Address>) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddressArray(this.value0));
    map.set("value1", ethereum.Value.fromAddressArray(this.value1));
    return map;
  }

  getFmWrappers(): Array<Address> {
    return this.value0;
  }

  getVaults(): Array<Address> {
    return this.value1;
  }
}

export class FactoryContract extends ethereum.SmartContract {
  static bind(address: Address): FactoryContract {
    return new FactoryContract("FactoryContract", address);
  }

  Ops(): Address {
    let result = super.call("Ops", "Ops():(address)", []);

    return result[0].toAddress();
  }

  try_Ops(): ethereum.CallResult<Address> {
    let result = super.tryCall("Ops", "Ops():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  deployBasicFundManager(
    _fundConfig: FactoryContract__deployBasicFundManagerInput_fundConfigStruct,
    _feeManagerConfigData: Bytes,
    _policyManagerConfigData: Bytes,
    _amountUSDC: BigInt,
    _deadline: BigInt,
    v: i32,
    r: Bytes,
    s: Bytes,
    _swapArgs: Array<
      FactoryContract__deployBasicFundManagerInput_swapArgsStruct
    >,
    _positionArgs: Array<
      FactoryContract__deployBasicFundManagerInput_positionArgsStruct
    >
  ): Address {
    let result = super.call(
      "deployBasicFundManager",
      "deployBasicFundManager((address[],bytes,bytes),bytes,bytes,uint256,uint256,uint8,bytes32,bytes32,(address,uint256,bytes)[],(address,uint256,bytes)[]):(address)",
      [
        ethereum.Value.fromTuple(_fundConfig),
        ethereum.Value.fromBytes(_feeManagerConfigData),
        ethereum.Value.fromBytes(_policyManagerConfigData),
        ethereum.Value.fromUnsignedBigInt(_amountUSDC),
        ethereum.Value.fromUnsignedBigInt(_deadline),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(v)),
        ethereum.Value.fromFixedBytes(r),
        ethereum.Value.fromFixedBytes(s),
        ethereum.Value.fromTupleArray(_swapArgs),
        ethereum.Value.fromTupleArray(_positionArgs)
      ]
    );

    return result[0].toAddress();
  }

  try_deployBasicFundManager(
    _fundConfig: FactoryContract__deployBasicFundManagerInput_fundConfigStruct,
    _feeManagerConfigData: Bytes,
    _policyManagerConfigData: Bytes,
    _amountUSDC: BigInt,
    _deadline: BigInt,
    v: i32,
    r: Bytes,
    s: Bytes,
    _swapArgs: Array<
      FactoryContract__deployBasicFundManagerInput_swapArgsStruct
    >,
    _positionArgs: Array<
      FactoryContract__deployBasicFundManagerInput_positionArgsStruct
    >
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "deployBasicFundManager",
      "deployBasicFundManager((address[],bytes,bytes),bytes,bytes,uint256,uint256,uint8,bytes32,bytes32,(address,uint256,bytes)[],(address,uint256,bytes)[]):(address)",
      [
        ethereum.Value.fromTuple(_fundConfig),
        ethereum.Value.fromBytes(_feeManagerConfigData),
        ethereum.Value.fromBytes(_policyManagerConfigData),
        ethereum.Value.fromUnsignedBigInt(_amountUSDC),
        ethereum.Value.fromUnsignedBigInt(_deadline),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(v)),
        ethereum.Value.fromFixedBytes(r),
        ethereum.Value.fromFixedBytes(s),
        ethereum.Value.fromTupleArray(_swapArgs),
        ethereum.Value.fromTupleArray(_positionArgs)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  fundManagersByUser(param0: Address, param1: BigInt): Address {
    let result = super.call(
      "fundManagersByUser",
      "fundManagersByUser(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toAddress();
  }

  try_fundManagersByUser(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "fundManagersByUser",
      "fundManagersByUser(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  fundmanagers(param0: BigInt): Address {
    let result = super.call("fundmanagers", "fundmanagers(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_fundmanagers(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "fundmanagers",
      "fundmanagers(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getImplementation(): Address {
    let result = super.call(
      "getImplementation",
      "getImplementation():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getImplementation(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getImplementation",
      "getImplementation():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getProtocolLibForType(_typeId: BigInt): Address {
    let result = super.call(
      "getProtocolLibForType",
      "getProtocolLibForType(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(_typeId)]
    );

    return result[0].toAddress();
  }

  try_getProtocolLibForType(_typeId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getProtocolLibForType",
      "getProtocolLibForType(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(_typeId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getStrategyCount(): BigInt {
    let result = super.call(
      "getStrategyCount",
      "getStrategyCount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getStrategyCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getStrategyCount",
      "getStrategyCount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getStratgiesOfUser(
    _user: Address
  ): FactoryContract__getStratgiesOfUserResult {
    let result = super.call(
      "getStratgiesOfUser",
      "getStratgiesOfUser(address):(address[],address[])",
      [ethereum.Value.fromAddress(_user)]
    );

    return new FactoryContract__getStratgiesOfUserResult(
      result[0].toAddressArray(),
      result[1].toAddressArray()
    );
  }

  try_getStratgiesOfUser(
    _user: Address
  ): ethereum.CallResult<FactoryContract__getStratgiesOfUserResult> {
    let result = super.tryCall(
      "getStratgiesOfUser",
      "getStratgiesOfUser(address):(address[],address[])",
      [ethereum.Value.fromAddress(_user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new FactoryContract__getStratgiesOfUserResult(
        value[0].toAddressArray(),
        value[1].toAddressArray()
      )
    );
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pendingOwner(): Address {
    let result = super.call("pendingOwner", "pendingOwner():(address)", []);

    return result[0].toAddress();
  }

  try_pendingOwner(): ethereum.CallResult<Address> {
    let result = super.tryCall("pendingOwner", "pendingOwner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  proxiableUUID(): Bytes {
    let result = super.call("proxiableUUID", "proxiableUUID():(bytes32)", []);

    return result[0].toBytes();
  }

  try_proxiableUUID(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "proxiableUUID",
      "proxiableUUID():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  shareActionBlockLock(): BigInt {
    let result = super.call(
      "shareActionBlockLock",
      "shareActionBlockLock():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_shareActionBlockLock(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "shareActionBlockLock",
      "shareActionBlockLock():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  shareActionTimeLock(): BigInt {
    let result = super.call(
      "shareActionTimeLock",
      "shareActionTimeLock():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_shareActionTimeLock(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "shareActionTimeLock",
      "shareActionTimeLock():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  version(): BigInt {
    let result = super.call("version", "version():(uint256)", []);

    return result[0].toBigInt();
  }

  try_version(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("version", "version():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class AcceptOwnershipCall extends ethereum.Call {
  get inputs(): AcceptOwnershipCall__Inputs {
    return new AcceptOwnershipCall__Inputs(this);
  }

  get outputs(): AcceptOwnershipCall__Outputs {
    return new AcceptOwnershipCall__Outputs(this);
  }
}

export class AcceptOwnershipCall__Inputs {
  _call: AcceptOwnershipCall;

  constructor(call: AcceptOwnershipCall) {
    this._call = call;
  }
}

export class AcceptOwnershipCall__Outputs {
  _call: AcceptOwnershipCall;

  constructor(call: AcceptOwnershipCall) {
    this._call = call;
  }
}

export class ChangeFundManagerImplCall extends ethereum.Call {
  get inputs(): ChangeFundManagerImplCall__Inputs {
    return new ChangeFundManagerImplCall__Inputs(this);
  }

  get outputs(): ChangeFundManagerImplCall__Outputs {
    return new ChangeFundManagerImplCall__Outputs(this);
  }
}

export class ChangeFundManagerImplCall__Inputs {
  _call: ChangeFundManagerImplCall;

  constructor(call: ChangeFundManagerImplCall) {
    this._call = call;
  }

  get newImpl(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get typeId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ChangeFundManagerImplCall__Outputs {
  _call: ChangeFundManagerImplCall;

  constructor(call: ChangeFundManagerImplCall) {
    this._call = call;
  }
}

export class DeployBasicFundManagerCall extends ethereum.Call {
  get inputs(): DeployBasicFundManagerCall__Inputs {
    return new DeployBasicFundManagerCall__Inputs(this);
  }

  get outputs(): DeployBasicFundManagerCall__Outputs {
    return new DeployBasicFundManagerCall__Outputs(this);
  }
}

export class DeployBasicFundManagerCall__Inputs {
  _call: DeployBasicFundManagerCall;

  constructor(call: DeployBasicFundManagerCall) {
    this._call = call;
  }

  get _fundConfig(): DeployBasicFundManagerCall_fundConfigStruct {
    return changetype<DeployBasicFundManagerCall_fundConfigStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }

  get _feeManagerConfigData(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get _policyManagerConfigData(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get _amountUSDC(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _deadline(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[5].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[7].value.toBytes();
  }

  get _swapArgs(): Array<DeployBasicFundManagerCall_swapArgsStruct> {
    return this._call.inputValues[8].value.toTupleArray<
      DeployBasicFundManagerCall_swapArgsStruct
    >();
  }

  get _positionArgs(): Array<DeployBasicFundManagerCall_positionArgsStruct> {
    return this._call.inputValues[9].value.toTupleArray<
      DeployBasicFundManagerCall_positionArgsStruct
    >();
  }
}

export class DeployBasicFundManagerCall__Outputs {
  _call: DeployBasicFundManagerCall;

  constructor(call: DeployBasicFundManagerCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class DeployBasicFundManagerCall_fundConfigStruct extends ethereum.Tuple {
  get configAddress(): Array<Address> {
    return this[0].toAddressArray();
  }

  get name(): Bytes {
    return this[1].toBytes();
  }

  get symbol(): Bytes {
    return this[2].toBytes();
  }
}

export class DeployBasicFundManagerCall_swapArgsStruct extends ethereum.Tuple {
  get _extension(): Address {
    return this[0].toAddress();
  }

  get _actionId(): BigInt {
    return this[1].toBigInt();
  }

  get _callArgs(): Bytes {
    return this[2].toBytes();
  }
}

export class DeployBasicFundManagerCall_positionArgsStruct extends ethereum.Tuple {
  get _extension(): Address {
    return this[0].toAddress();
  }

  get _actionId(): BigInt {
    return this[1].toBigInt();
  }

  get _callArgs(): Bytes {
    return this[2].toBytes();
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _basicfundManagerImpl(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _fundManagerWithCTImpl(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _Ops(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetNewFundManagerImplCall extends ethereum.Call {
  get inputs(): SetNewFundManagerImplCall__Inputs {
    return new SetNewFundManagerImplCall__Inputs(this);
  }

  get outputs(): SetNewFundManagerImplCall__Outputs {
    return new SetNewFundManagerImplCall__Outputs(this);
  }
}

export class SetNewFundManagerImplCall__Inputs {
  _call: SetNewFundManagerImplCall;

  constructor(call: SetNewFundManagerImplCall) {
    this._call = call;
  }

  get proxy(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get newImpl(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get typeId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SetNewFundManagerImplCall__Outputs {
  _call: SetNewFundManagerImplCall;

  constructor(call: SetNewFundManagerImplCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class TransferVaultOwnershipCall extends ethereum.Call {
  get inputs(): TransferVaultOwnershipCall__Inputs {
    return new TransferVaultOwnershipCall__Inputs(this);
  }

  get outputs(): TransferVaultOwnershipCall__Outputs {
    return new TransferVaultOwnershipCall__Outputs(this);
  }
}

export class TransferVaultOwnershipCall__Inputs {
  _call: TransferVaultOwnershipCall;

  constructor(call: TransferVaultOwnershipCall) {
    this._call = call;
  }

  get _fundManager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _newOwner(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class TransferVaultOwnershipCall__Outputs {
  _call: TransferVaultOwnershipCall;

  constructor(call: TransferVaultOwnershipCall) {
    this._call = call;
  }
}

export class UpdateGelatoOpsCall extends ethereum.Call {
  get inputs(): UpdateGelatoOpsCall__Inputs {
    return new UpdateGelatoOpsCall__Inputs(this);
  }

  get outputs(): UpdateGelatoOpsCall__Outputs {
    return new UpdateGelatoOpsCall__Outputs(this);
  }
}

export class UpdateGelatoOpsCall__Inputs {
  _call: UpdateGelatoOpsCall;

  constructor(call: UpdateGelatoOpsCall) {
    this._call = call;
  }

  get _Ops(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateGelatoOpsCall__Outputs {
  _call: UpdateGelatoOpsCall;

  constructor(call: UpdateGelatoOpsCall) {
    this._call = call;
  }
}

export class UpdateProtocolLibInfoCall extends ethereum.Call {
  get inputs(): UpdateProtocolLibInfoCall__Inputs {
    return new UpdateProtocolLibInfoCall__Inputs(this);
  }

  get outputs(): UpdateProtocolLibInfoCall__Outputs {
    return new UpdateProtocolLibInfoCall__Outputs(this);
  }
}

export class UpdateProtocolLibInfoCall__Inputs {
  _call: UpdateProtocolLibInfoCall;

  constructor(call: UpdateProtocolLibInfoCall) {
    this._call = call;
  }

  get _typeIds(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get _libs(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }
}

export class UpdateProtocolLibInfoCall__Outputs {
  _call: UpdateProtocolLibInfoCall;

  constructor(call: UpdateProtocolLibInfoCall) {
    this._call = call;
  }
}

export class UpdateSharesActionLockCall extends ethereum.Call {
  get inputs(): UpdateSharesActionLockCall__Inputs {
    return new UpdateSharesActionLockCall__Inputs(this);
  }

  get outputs(): UpdateSharesActionLockCall__Outputs {
    return new UpdateSharesActionLockCall__Outputs(this);
  }
}

export class UpdateSharesActionLockCall__Inputs {
  _call: UpdateSharesActionLockCall;

  constructor(call: UpdateSharesActionLockCall) {
    this._call = call;
  }

  get _shareActionTimeLock(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _shareActionBlockLock(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UpdateSharesActionLockCall__Outputs {
  _call: UpdateSharesActionLockCall;

  constructor(call: UpdateSharesActionLockCall) {
    this._call = call;
  }
}

export class UpdateVersionCall extends ethereum.Call {
  get inputs(): UpdateVersionCall__Inputs {
    return new UpdateVersionCall__Inputs(this);
  }

  get outputs(): UpdateVersionCall__Outputs {
    return new UpdateVersionCall__Outputs(this);
  }
}

export class UpdateVersionCall__Inputs {
  _call: UpdateVersionCall;

  constructor(call: UpdateVersionCall) {
    this._call = call;
  }

  get _version(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateVersionCall__Outputs {
  _call: UpdateVersionCall;

  constructor(call: UpdateVersionCall) {
    this._call = call;
  }
}

export class UpgradeToCall extends ethereum.Call {
  get inputs(): UpgradeToCall__Inputs {
    return new UpgradeToCall__Inputs(this);
  }

  get outputs(): UpgradeToCall__Outputs {
    return new UpgradeToCall__Outputs(this);
  }
}

export class UpgradeToCall__Inputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpgradeToCall__Outputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }
}

export class UpgradeToAndCallCall extends ethereum.Call {
  get inputs(): UpgradeToAndCallCall__Inputs {
    return new UpgradeToAndCallCall__Inputs(this);
  }

  get outputs(): UpgradeToAndCallCall__Outputs {
    return new UpgradeToAndCallCall__Outputs(this);
  }
}

export class UpgradeToAndCallCall__Inputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class UpgradeToAndCallCall__Outputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }
}
